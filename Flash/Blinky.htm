<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Apr 05 18:33:50 2016
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; net_main &rArr; net_sys_run &rArr; dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">rt_alloc_box</a><BR>
 <LI><a href="#[270]">net_sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[270]">net_sys_error</a><BR>
 <LI><a href="#[67]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67]">NMI_Handler</a><BR>
 <LI><a href="#[68]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">HardFault_Handler</a><BR>
 <LI><a href="#[69]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">MemManage_Handler</a><BR>
 <LI><a href="#[6a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">BusFault_Handler</a><BR>
 <LI><a href="#[6b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">UsageFault_Handler</a><BR>
 <LI><a href="#[6d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">DebugMon_Handler</a><BR>
 <LI><a href="#[64]">eth_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">eth_thread</a><BR>
 <LI><a href="#[2f7]">str_up_case</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f7]">str_up_case</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[97]">ADC0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b9]">ADC1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[27]">BlinkLed</a> from blinky.o(.text) referenced from blinky.o(.constdata)
 <LI><a href="#[6a]">BusFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[bc]">CAN0_Bus_Off_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[bd]">CAN0_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[bb]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[bf]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[be]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[c0]">CAN0_Wake_Up_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[5]">CLOCK_SYS_FllStableDelay</a> from fsl_clock_mk64f12.o(.text) referenced from fsl_clock_mk64f12.o(.text)
 <LI><a href="#[98]">CMP0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[99]">CMP1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b6]">CMP2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[9d]">CMT_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[39]">Control</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[38]">ControlTimer</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[a8]">DAC0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b8]">DAC1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[70]">DMA0_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7a]">DMA10_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7b]">DMA11_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7c]">DMA12_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7d]">DMA13_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7e]">DMA14_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7f]">DMA15_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[71]">DMA1_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[72]">DMA2_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[73]">DMA3_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[74]">DMA4_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[75]">DMA5_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[76]">DMA6_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[77]">DMA7_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[78]">DMA8_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[79]">DMA9_IRQHandler</a> from fsl_edma_irq.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[80]">DMA_Error_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6d]">DebugMon_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[c6]">DefaultISR</a> from startup_mk64f12.o(.text) referenced 153 times from startup_mk64f12.o(RESET)
 <LI><a href="#[c2]">ENET_1588_Timer_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[c5]">ENET_Error_IRQHandler</a> from emac_mk64f.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[c4]">ENET_Receive_IRQHandler</a> from emac_mk64f.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[c3]">ENET_Transmit_IRQHandler</a> from emac_mk64f.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[82]">FTFE_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[9a]">FTM0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[9b]">FTM1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[9c]">FTM2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b7]">FTM3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2c]">GetCapabilities</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[63]">GetLinkInfo</a> from phy_ksz8081rna.o(.text) referenced from phy_ksz8081rna.o(.constdata)
 <LI><a href="#[62]">GetLinkState</a> from phy_ksz8081rna.o(.text) referenced from phy_ksz8081rna.o(.constdata)
 <LI><a href="#[30]">GetMacAddress</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[35]">GetRxFrameSize</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[36]">GetRxFrameTime</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[37]">GetTxFrameTime</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[2b]">GetVersion</a> from emac_mk64f.o(.text) referenced 2 times from emac_mk64f.o(.constdata)
 <LI><a href="#[68]">HardFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[46]">I2C0_Control</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[45]">I2C0_GetDataCount</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[47]">I2C0_GetStatus</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[88]">I2C0_IRQHandler</a> from i2c_mk64f.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3e]">I2C0_Initialize</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[42]">I2C0_MasterReceive</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[41]">I2C0_MasterTransmit</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[40]">I2C0_PowerControl</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[44]">I2C0_SlaveReceive</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[43]">I2C0_SlaveTransmit</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[3f]">I2C0_Uninitialize</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[50]">I2C1_Control</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[4f]">I2C1_GetDataCount</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[51]">I2C1_GetStatus</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[89]">I2C1_IRQHandler</a> from i2c_mk64f.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[48]">I2C1_Initialize</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[4c]">I2C1_MasterReceive</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[4b]">I2C1_MasterTransmit</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[4a]">I2C1_PowerControl</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[4e]">I2C1_SlaveReceive</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[4d]">I2C1_SlaveTransmit</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[49]">I2C1_Uninitialize</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[5a]">I2C2_Control</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[59]">I2C2_GetDataCount</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[5b]">I2C2_GetStatus</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[ba]">I2C2_IRQHandler</a> from i2c_mk64f.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[52]">I2C2_Initialize</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[56]">I2C2_MasterReceive</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[55]">I2C2_MasterTransmit</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[54]">I2C2_PowerControl</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[58]">I2C2_SlaveReceive</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[57]">I2C2_SlaveTransmit</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[53]">I2C2_Uninitialize</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.constdata)
 <LI><a href="#[3d]">I2CX_GetCapabilities</a> from i2c_mk64f.o(.text) referenced 3 times from i2c_mk64f.o(.constdata)
 <LI><a href="#[3c]">I2CX_GetVersion</a> from i2c_mk64f.o(.text) referenced 3 times from i2c_mk64f.o(.constdata)
 <LI><a href="#[4]">I2Cx_DMA_Callback</a> from i2c_mk64f.o(.text) referenced from i2c_mk64f.o(.text)
 <LI><a href="#[8d]">I2S0_Rx_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8c]">I2S0_Tx_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2d]">Initialize</a> from emac_mk64f.o(.text) referenced 2 times from emac_mk64f.o(.constdata)
 <LI><a href="#[85]">LLWU_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[aa]">LPTMR0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[84]">LVD_LVW_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[a9]">MCG_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[81]">MCM_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[69]">MemManage_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[28]">Message</a> from blinky.o(.text) referenced from blinky.o(.constdata)
 <LI><a href="#[67]">NMI_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[a4]">PDB0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[3a]">PHY_Read</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[3b]">PHY_Write</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[a0]">PIT0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[a1]">PIT1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[a2]">PIT2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[a3]">PIT3_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[ab]">PORTA_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[ac]">PORTB_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[ad]">PORTC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[ae]">PORTD_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[af]">PORTE_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6e]">PendSV_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2f]">PowerControl</a> from emac_mk64f.o(.text) referenced 2 times from emac_mk64f.o(.constdata)
 <LI><a href="#[87]">RNG_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[9e]">RTC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[9f]">RTC_Seconds_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[34]">ReadFrame</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[83]">Read_Collision_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[a7]">Reserved71_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[66]">Reset_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[c1]">SDHC_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8a]">SPI0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8b]">SPI1_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b1]">SPI2_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[6c]">SVC_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b0]">SWI_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[33]">SendFrame</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[32]">SetAddressFilter</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[60]">SetInterface</a> from phy_ksz8081rna.o(.text) referenced from phy_ksz8081rna.o(.constdata)
 <LI><a href="#[31]">SetMacAddress</a> from emac_mk64f.o(.text) referenced from emac_mk64f.o(.constdata)
 <LI><a href="#[61]">SetMode</a> from phy_ksz8081rna.o(.text) referenced from phy_ksz8081rna.o(.constdata)
 <LI><a href="#[6f]">SysTick_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[9]">SystemInit</a> from system_mk64f12.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[29]">Thread</a> from ledthread.o(.text) referenced from ledthread.o(.constdata)
 <LI><a href="#[90]">UART0_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8e]">UART0_LON_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[8f]">UART0_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[92]">UART1_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[91]">UART1_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[94]">UART2_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[93]">UART2_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[96]">UART3_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[95]">UART3_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b3]">UART4_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b2]">UART4_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b5]">UART5_ERR_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b4]">UART5_RX_TX_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[7]">UART_HAL_ReceiveDataPolling</a> from fsl_uart_hal.o(.text) referenced from fsl_debug_console.o(.text)
 <LI><a href="#[6]">UART_HAL_SendDataPolling</a> from fsl_uart_hal.o(.text) referenced from fsl_debug_console.o(.text)
 <LI><a href="#[a5]">USB0_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[a6]">USBDCD_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[2e]">Uninitialize</a> from emac_mk64f.o(.text) referenced 2 times from emac_mk64f.o(.constdata)
 <LI><a href="#[6b]">UsageFault_Handler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[86]">WDOG_EWM_IRQHandler</a> from startup_mk64f12.o(.text) referenced from startup_mk64f12.o(RESET)
 <LI><a href="#[b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[d]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[8]">debug_putc</a> from fsl_debug_console.o(.text) referenced from fsl_debug_console.o(.text)
 <LI><a href="#[e]">dhcp_listener</a> from net_dhcp_client.o(i.dhcp_listener) referenced from net_dhcp_client.o(i.dhcp_client_init)
 <LI><a href="#[f]">eth_notify</a> from net_eth.o(i.eth_notify) referenced from net_eth.o(i.eth_init_link)
 <LI><a href="#[64]">eth_thread</a> from net_eth.o(i.eth_thread) referenced from net_eth.o(.constdata)
 <LI><a href="#[c]">fputc</a> from retarget_io.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[10]">http_listener</a> from net_http_server.o(i.http_listener) referenced from net_http_server.o(i.http_server_init)
 <LI><a href="#[a]">init_data_bss</a> from startup.o(.text) referenced from startup_mk64f12.o(.text)
 <LI><a href="#[1]">main</a> from blinky.o(.text) referenced 2 times from rtx_conf_cm.o(.data)
 <LI><a href="#[11]">nbns_listener</a> from net_nbns_client.o(i.nbns_listener) referenced from net_nbns_client.o(i.nbns_client_init)
 <LI><a href="#[65]">net_timer_tick</a> from net_sys.o(i.net_timer_tick) referenced from net_sys.o(.constdata)
 <LI><a href="#[26]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[2a]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[25]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[2]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[3]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[12]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[13]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[14]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[15]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[16]">svcMutexCreate</a> from rt_cmsis.o(i.svcMutexCreate) referenced from rt_cmsis.o(i.osMutexCreate)
 <LI><a href="#[17]">svcMutexRelease</a> from rt_cmsis.o(i.svcMutexRelease) referenced from rt_cmsis.o(i.osMutexRelease)
 <LI><a href="#[18]">svcMutexWait</a> from rt_cmsis.o(i.svcMutexWait) referenced from rt_cmsis.o(i.osMutexWait)
 <LI><a href="#[19]">svcSemaphoreCreate</a> from rt_cmsis.o(i.svcSemaphoreCreate) referenced from rt_cmsis.o(i.osSemaphoreCreate)
 <LI><a href="#[1a]">svcSemaphoreRelease</a> from rt_cmsis.o(i.svcSemaphoreRelease) referenced from rt_cmsis.o(i.osSemaphoreRelease)
 <LI><a href="#[1b]">svcSemaphoreWait</a> from rt_cmsis.o(i.svcSemaphoreWait) referenced from rt_cmsis.o(i.osSemaphoreWait)
 <LI><a href="#[1c]">svcSignalSet</a> from rt_cmsis.o(i.svcSignalSet) referenced from rt_cmsis.o(i.osSignalSet)
 <LI><a href="#[1d]">svcSignalWait</a> from rt_cmsis.o(i.svcSignalWait) referenced from rt_cmsis.o(i.osSignalWait)
 <LI><a href="#[1e]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[1f]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[20]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[21]">svcThreadYield</a> from rt_cmsis.o(i.svcThreadYield) referenced from rt_cmsis.o(i.osThreadYield)
 <LI><a href="#[22]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
 <LI><a href="#[23]">svcTimerCreate</a> from rt_cmsis.o(i.svcTimerCreate) referenced from rt_cmsis.o(i.osTimerCreate)
 <LI><a href="#[24]">svcTimerStart</a> from rt_cmsis.o(i.svcTimerStart) referenced from rt_cmsis.o(i.osTimerStart)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[344]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[c7]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[27c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[345]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[346]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[347]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[348]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c9]"></a>_main_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _main_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[349]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[326]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[34a]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[34b]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[34c]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[6c]"></a>SVC_Handler</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>PendSV_Handler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[d3]"></a>Delay</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcddata
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdcmd1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdcmd
</UL>

<P><STRONG><a name="[e0]"></a>LCD_PInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, blinky.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>lcdcmd</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, blinky.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[d4]"></a>lcdcmd1</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcdcmd1 &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[d5]"></a>lcddata</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcddata &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>LCD_Init</STRONG> (Thumb, 186 bytes, Stack size 4 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Init &rArr; lcdcmd1 &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdcmd1
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>dhcp_client_notify</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dhcp_client_notify &rArr; ip4_ntoa &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_ntoa
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
</UL>

<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; net_main &rArr; net_sys_run &rArr; dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_Initialize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetState
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcddata
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>Init_Thread</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ledthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_Thread &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>Thread</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ledthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Thread &rArr; LED_SetOut &rArr; LED_On &rArr; GPIO_DRV_WritePinOutput &rArr; GPIO_HAL_WritePinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magnetometer_Initialize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magnetometer_GetState
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelerometer_Initialize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelerometer_GetState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledthread.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>cgi_process_query</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, http_server_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cgi_process_query &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_env_var
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[ed]"></a>cgi_process_data</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, http_server_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cgi_process_data &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_env_var
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
</UL>

<P><STRONG><a name="[ee]"></a>cgi_script</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, http_server_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cgi_script &rArr; LED_On &rArr; GPIO_DRV_WritePinOutput &rArr; GPIO_HAL_WritePinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2b2]"></a>cgx_content_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, http_server_cgi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[2b3]"></a>http_encoding</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, http_server_cgi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[f2]"></a>imageFileInfo</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imageFileInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[df]"></a>Buttons_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, buttons_frdm_k64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Buttons_Initialize &rArr; GPIO_DRV_Init &rArr; GPIO_DRV_InputPinInit &rArr; GPIO_HAL_SetPinDir &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34d]"></a>Buttons_Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttons_frdm_k64f.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>Buttons_GetState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, buttons_frdm_k64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Buttons_GetState &rArr; GPIO_DRV_ReadPinInput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ReadPinInput
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34e]"></a>Buttons_GetCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttons_frdm_k64f.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>Initialize</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fxos8700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Initialize &rArr; Register_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magnetometer_Initialize
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelerometer_Initialize
</UL>

<P><STRONG><a name="[e7]"></a>Accelerometer_Initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fxos8700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Accelerometer_Initialize &rArr; Initialize &rArr; Register_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread
</UL>

<P><STRONG><a name="[34f]"></a>Accelerometer_Uninitialize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fxos8700.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>Accelerometer_GetState</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, fxos8700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Accelerometer_GetState &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread
</UL>

<P><STRONG><a name="[e8]"></a>Magnetometer_Initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fxos8700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Magnetometer_Initialize &rArr; Initialize &rArr; Register_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread
</UL>

<P><STRONG><a name="[350]"></a>Magnetometer_Uninitialize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fxos8700.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>Magnetometer_GetState</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, fxos8700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Magnetometer_GetState &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread
</UL>

<P><STRONG><a name="[de]"></a>LED_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led_frdm_k64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LED_Initialize &rArr; GPIO_DRV_Init &rArr; GPIO_DRV_InputPinInit &rArr; GPIO_HAL_SetPinDir &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[351]"></a>LED_Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_frdm_k64f.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>LED_On</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led_frdm_k64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LED_On &rArr; GPIO_DRV_WritePinOutput &rArr; GPIO_HAL_WritePinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_script
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetOut
</UL>

<P><STRONG><a name="[f1]"></a>LED_Off</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led_frdm_k64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LED_Off &rArr; GPIO_DRV_WritePinOutput &rArr; GPIO_HAL_WritePinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_script
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetOut
</UL>

<P><STRONG><a name="[dc]"></a>LED_SetOut</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led_frdm_k64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LED_SetOut &rArr; LED_On &rArr; GPIO_DRV_WritePinOutput &rArr; GPIO_HAL_WritePinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkLed
</UL>

<P><STRONG><a name="[352]"></a>LED_GetCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_frdm_k64f.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[311]"></a>os_error</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[c3]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_Transmit_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetIntStatusFlag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_ClearIntStatusFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_Receive_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetIntStatusFlag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_ClearIntStatusFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_Error_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetIntStatusFlag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_ClearIntStatusFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>I2C0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C0_IRQHandler &rArr; I2Cx_IRQHandler &rArr; I2C_HAL_SendStop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>I2C1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C1_IRQHandler &rArr; I2Cx_IRQHandler &rArr; I2C_HAL_SendStop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>I2C2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C2_IRQHandler &rArr; I2Cx_IRQHandler &rArr; I2C_HAL_SendStop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[13f]"></a>ITM_SendChar</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[353]"></a>ITM_ReceiveChar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[354]"></a>fgetc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>__backspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_assert</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinDir
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetBasicTransfer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetHalfCompleteIntCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetDisableDmaRequestAfterTCDDoneCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetScatterGatherCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetChannelMajorLink
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetBandwidth
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_ReadPinInput
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_ClearPinOutput
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinOutput
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetOpenDrainCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetBuffDescripData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetBufDescripAttr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_ClrRxBdAfterHandled
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ReadPinInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_EnDynamicalAct
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetStatus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetTxBdBeforeSend
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetRMIIMode
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetMibTxStat
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetMibRxStat
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetFifo
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetTxFifo
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetRxFifo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Set1588Timer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetRxBuffDescriptors
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_InitRxBuffDescriptors
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetTxBuffDescriptors
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_InitTxBuffDescriptors
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetMac
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetTxInterPacketGap
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetMacAddr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetSMI
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetMajorCount
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetChannelMinorLink
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetMinorLoopOffset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetNbytes
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetAttribute
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetFinishedBytes
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetUnfinishedBytes
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetCurrentMajorCount
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetBeginMajorCount
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDSetMajorCount
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDSetChannelMinorLink
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDSetScatterGatherLink
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDSetMinorLoopOffset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetNbytes
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDSetNbytes
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDSetAttribute
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_WritePinOutput
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinIntFlag
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_IsPinIntPending
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_TogglePinOutput
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPinOutput
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinOutput
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_GetPinDir
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_InputPinInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_OutputPinInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetDigitalFilterCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetScatterGatherLink
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_PushSTCDToHTCD
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigScatterGatherTransfer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigLoopTransfer
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ClaimChannel
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQ
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_HAL_SetChannelCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetDriveStrengthMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetOpenDrainCmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPassiveFilterCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetSlewRateMode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPullCmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPullMode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_RtcOscInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_RtcOscDeinit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscDeinit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUartGateCmd
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableUartClock
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableUartClock
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetI2cGateCmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableI2cClock
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableI2cClock
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSpiGateCmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableSpiClock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableSpiClock
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFtmGateCmd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableFtmClock
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableFtmClock
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetDacGateCmd
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableDacClock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableDacClock
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetAdcGateCmd
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableAdcClock
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableAdcClock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPortGateCmd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisablePortClock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_InstallHandler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQDestroy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQGet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQPut
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQCreate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TaskDestroy
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventDestroy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventClear
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventGetFlags
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexDestroy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaDestroy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaPost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaWait
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaCreate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_SetBaudRateDivisor
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetFtmFaultSelMode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetFtmFaultSelMode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetFtmChSrcMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetFtmChSrcMode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetFtmExternalClkPinMode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetFtmExternalClkPinMode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetFtmTriggerSrcMode
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetFtmTriggerSrcMode
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetUartTxSrcMode
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetUartTxSrcMode
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetUartRxSrcMode
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetUartRxSrcMode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetAdcTriggerModeOneStep
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetAdcTriggerMode
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetAdcTriggerMode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetAdcPreTriggerMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetAdcPreTriggerMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetAdcAlternativeTriggerCmd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_SetAdcAlternativeTriggerCmd
</UL>

<P><STRONG><a name="[142]"></a>BOARD_InitOsc0</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BOARD_InitOsc0 &rArr; CLOCK_SYS_OscInit &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
</UL>

<P><STRONG><a name="[144]"></a>BOARD_InitRtcOsc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BOARD_InitRtcOsc &rArr; CLOCK_SYS_RtcOscInit &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_RtcOscInit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
</UL>

<P><STRONG><a name="[146]"></a>BOARD_ClockInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BOARD_ClockInit &rArr; CLOCK_SYS_SetConfiguration &rArr; CLOCK_SYS_SetMcgMode &rArr; CLOCK_HAL_SetPbeMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitRtcOsc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitOsc0
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[e3]"></a>dbg_uart_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = dbg_uart_init &rArr; DbgConsole_Init &rArr; CLOCK_SYS_GetUartFreq &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart_pins
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>configure_can_pins</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>

<P><STRONG><a name="[152]"></a>configure_cmp_pins</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>

<P><STRONG><a name="[153]"></a>configure_enet_pins</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = configure_enet_pins &rArr; PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetOpenDrainCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPullCmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPullMode
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[154]"></a>configure_gpio_pins</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = configure_gpio_pins &rArr; PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetDriveStrengthMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPassiveFilterCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetSlewRateMode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPullCmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPullMode
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[155]"></a>configure_i2c_pins</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = configure_i2c_pins &rArr; PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetOpenDrainCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[156]"></a>configure_i2s_pins</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>

<P><STRONG><a name="[157]"></a>configure_rtc_pins</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>

<P><STRONG><a name="[158]"></a>configure_sdhc_pins</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetDriveStrengthMode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPullCmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetPullMode
</UL>

<P><STRONG><a name="[159]"></a>configure_spi_pins</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>

<P><STRONG><a name="[148]"></a>configure_uart_pins</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = configure_uart_pins &rArr; PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
</UL>

<P><STRONG><a name="[15a]"></a>configure_spi_cs0_pins</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>

<P><STRONG><a name="[15b]"></a>configure_spi_cs1_pins</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>

<P><STRONG><a name="[15c]"></a>configure_gpio_i2c_pins</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>

<P><STRONG><a name="[15d]"></a>configure_ftm_pins</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pin_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>

<P><STRONG><a name="[a]"></a>init_data_bss</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[162]"></a>EDMA_DRV_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_HAL_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQ
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[166]"></a>EDMA_DRV_ReleaseChannel</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_SetDmaRequestCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_Deinit
</UL>

<P><STRONG><a name="[168]"></a>EDMA_DRV_Deinit</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ReleaseChannel
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQ
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_DisableClock
</UL>

<P><STRONG><a name="[121]"></a>EDMA_DRV_InstallCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_edma_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[120]"></a>EDMA_DRV_RequestChannel</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, fsl_edma_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = EDMA_DRV_RequestChannel &rArr; EDMA_DRV_ClaimChannel &rArr; DMAMUX_HAL_SetChannelCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ClaimChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[16d]"></a>EDMA_DRV_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_edma_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_IRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>EDMA_DRV_ErrorIRQHandler</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_SetDmaRequestCmd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ClearIntStatus
</UL>

<P><STRONG><a name="[128]"></a>EDMA_DRV_PushDescriptorToReg</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fsl_edma_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EDMA_DRV_PushDescriptorToReg &rArr; EDMA_HAL_PushSTCDToHTCD &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_PushSTCDToHTCD
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDClearReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigScatterGatherTransfer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigLoopTransfer
</UL>

<P><STRONG><a name="[171]"></a>EDMA_DRV_ConfigLoopTransfer</STRONG> (Thumb, 350 bytes, Stack size 96 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PushDescriptorToReg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PrepareDescriptorScatterGather
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PrepareDescriptorTransfer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[173]"></a>EDMA_DRV_ConfigScatterGatherTransfer</STRONG> (Thumb, 390 bytes, Stack size 160 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PushDescriptorToReg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PrepareDescriptorScatterGather
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PrepareDescriptorTransfer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[129]"></a>EDMA_DRV_StartChannel</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fsl_edma_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EDMA_DRV_StartChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_SetDmaRequestCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>

<P><STRONG><a name="[174]"></a>EDMA_DRV_StopChannel</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_SetDmaRequestCmd
</UL>

<P><STRONG><a name="[70]"></a>DMA0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA0_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA2_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA3_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA4_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA5_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA6_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DMA7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA7_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DMA8_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA8_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DMA9_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA9_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA10_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DMA11_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA11_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA12_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA12_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA13_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA13_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DMA14_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA14_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DMA15_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_edma_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA15_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>GPIO_DRV_OutputPinInit</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, fsl_gpio_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GPIO_DRV_OutputPinInit &rArr; GPIO_HAL_SetPinDir &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinDir
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_WritePinOutput
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_Init
</UL>

<P><STRONG><a name="[17b]"></a>GPIO_DRV_InputPinInit</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, fsl_gpio_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GPIO_DRV_InputPinInit &rArr; GPIO_HAL_SetPinDir &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinDir
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetDigitalFilterCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_Init
</UL>

<P><STRONG><a name="[f4]"></a>GPIO_DRV_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_gpio_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GPIO_DRV_Init &rArr; GPIO_DRV_InputPinInit &rArr; GPIO_HAL_SetPinDir &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_InputPinInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_OutputPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Initialize
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_Initialize
</UL>

<P><STRONG><a name="[17c]"></a>GPIO_DRV_GetPinDir</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[17d]"></a>GPIO_DRV_SetPinDir</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinDir
</UL>

<P><STRONG><a name="[fd]"></a>GPIO_DRV_WritePinOutput</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GPIO_DRV_WritePinOutput &rArr; GPIO_HAL_WritePinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>

<P><STRONG><a name="[17e]"></a>GPIO_DRV_SetPinOutput</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[17f]"></a>GPIO_DRV_ClearPinOutput</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[180]"></a>GPIO_DRV_TogglePinOutput</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[f5]"></a>GPIO_DRV_ReadPinInput</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GPIO_DRV_ReadPinInput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetState
</UL>

<P><STRONG><a name="[181]"></a>GPIO_DRV_SetDigitalFilterCmd</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetDigitalFilterCmd
</UL>

<P><STRONG><a name="[182]"></a>GPIO_DRV_IsPinIntPending</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[183]"></a>GPIO_DRV_ClearPinIntFlag</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_gpio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[165]"></a>DMAMUX_HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_dmamux_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_Init
</UL>

<P><STRONG><a name="[16c]"></a>EDMA_HAL_HTCDClearReg</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, fsl_edma_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PushDescriptorToReg
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ClaimChannel
</UL>

<P><STRONG><a name="[164]"></a>EDMA_HAL_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDClearReg
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_Init
</UL>

<P><STRONG><a name="[356]"></a>EDMA_HAL_CancelTransfer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_edma_hal.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>EDMA_HAL_ErrorCancelTransfer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_edma_hal.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>EDMA_HAL_SetErrorIntCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_edma_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ClaimChannel
</UL>

<P><STRONG><a name="[358]"></a>EDMA_HAL_GetErrorStatus</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>EDMA_HAL_SetDmaRequestCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_edma_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_StartChannel
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_StopChannel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ErrorIRQHandler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ReleaseChannel
</UL>

<P><STRONG><a name="[184]"></a>EDMA_HAL_HTCDSetAttribute</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[185]"></a>EDMA_HAL_HTCDSetNbytes</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[186]"></a>EDMA_HAL_HTCDGetNbytes</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetFinishedBytes
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetUnfinishedBytes
</UL>

<P><STRONG><a name="[187]"></a>EDMA_HAL_HTCDSetMinorLoopOffset</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[188]"></a>EDMA_HAL_HTCDSetScatterGatherLink</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[189]"></a>EDMA_HAL_HTCDSetChannelMinorLink</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[18a]"></a>EDMA_HAL_HTCDSetMajorCount</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[18b]"></a>EDMA_HAL_HTCDGetBeginMajorCount</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetFinishedBytes
</UL>

<P><STRONG><a name="[18c]"></a>EDMA_HAL_HTCDGetCurrentMajorCount</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetFinishedBytes
</UL>

<P><STRONG><a name="[18d]"></a>EDMA_HAL_HTCDGetUnfinishedBytes</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetNbytes
</UL>

<P><STRONG><a name="[18e]"></a>EDMA_HAL_HTCDGetFinishedBytes</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetCurrentMajorCount
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetBeginMajorCount
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDGetNbytes
</UL>

<P><STRONG><a name="[18f]"></a>EDMA_HAL_STCDSetAttribute</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fsl_edma_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetBasicTransfer
</UL>

<P><STRONG><a name="[190]"></a>EDMA_HAL_STCDSetNbytes</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EDMA_HAL_STCDSetNbytes &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetBasicTransfer
</UL>

<P><STRONG><a name="[191]"></a>EDMA_HAL_STCDSetMinorLoopOffset</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[175]"></a>EDMA_HAL_STCDSetScatterGatherLink</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PrepareDescriptorScatterGather
</UL>

<P><STRONG><a name="[192]"></a>EDMA_HAL_STCDSetChannelMinorLink</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[193]"></a>EDMA_HAL_STCDSetMajorCount</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EDMA_HAL_STCDSetMajorCount &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetBasicTransfer
</UL>

<P><STRONG><a name="[170]"></a>EDMA_HAL_PushSTCDToHTCD</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, fsl_edma_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EDMA_HAL_PushSTCDToHTCD &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PushDescriptorToReg
</UL>

<P><STRONG><a name="[11a]"></a>EDMA_HAL_STCDSetBasicTransfer</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, fsl_edma_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetMajorCount
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetNbytes
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PrepareDescriptorTransfer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PrepareDescriptorTransfer
</UL>

<P><STRONG><a name="[359]"></a>ENET_HAL_Init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, fsl_enet_hal.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>ENET_HAL_SetRMIIMode</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ENET_HAL_SetRMIIMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetMac
</UL>

<P><STRONG><a name="[19e]"></a>ENET_HAL_Start1588Timer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Set1588Timer
</UL>

<P><STRONG><a name="[35a]"></a>ENET_HAL_Stop1588Timer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_enet_hal.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>ENET_HAL_SetMulticastAddrHash</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ENET_HAL_SetMulticastAddrHash
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddressFilter
</UL>

<P><STRONG><a name="[108]"></a>ENET_HAL_ClrRxBdAfterHandled</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ENET_HAL_ClrRxBdAfterHandled &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrame
</UL>

<P><STRONG><a name="[1a4]"></a>ENET_HAL_SetTxBdBeforeSend</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_enet_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[10e]"></a>ENET_HAL_SetSMIWrite</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ENET_HAL_SetSMIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
</UL>

<P><STRONG><a name="[10c]"></a>ENET_HAL_SetSMIRead</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENET_HAL_SetSMIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[10a]"></a>ENET_HAL_SetIntMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[103]"></a>ENET_HAL_Config</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ENET_HAL_Config &rArr; ENET_HAL_SetMac &rArr; ENET_HAL_SetSMI &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetFifo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetRxBuffDescriptors
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetTxBuffDescriptors
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetMac
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[1a5]"></a>ENET_HAL_GetStatus</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetMibTxStat
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetMibRxStat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[106]"></a>ENET_HAL_GetBufDescripAttr</STRONG> (Thumb, 970 bytes, Stack size 32 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ENET_HAL_GetBufDescripAttr &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxFrameSize
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[107]"></a>ENET_HAL_GetBuffDescripData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ENET_HAL_GetBuffDescripData &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrame
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[1a6]"></a>ENET_HAL_EnDynamicalAct</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[132]"></a>GPIO_HAL_SetPinDir</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_gpio_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_HAL_SetPinDir &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPinDir
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_InputPinInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_OutputPinInit
</UL>

<P><STRONG><a name="[17a]"></a>GPIO_HAL_WritePinOutput</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_gpio_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_HAL_WritePinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_WritePinOutput
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_OutputPinInit
</UL>

<P><STRONG><a name="[126]"></a>I2C_HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>

<P><STRONG><a name="[130]"></a>I2C_HAL_SetBaudRate</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, fsl_i2c_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_HAL_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[12a]"></a>I2C_HAL_SendStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterSendDataPolling
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterReceiveDataPolling
</UL>

<P><STRONG><a name="[125]"></a>I2C_HAL_SendStop</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fsl_i2c_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_HAL_SendStop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_GetStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterSendDataPolling
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterReceiveDataPolling
</UL>

<P><STRONG><a name="[12e]"></a>I2C_HAL_SetAddress7bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[12d]"></a>I2C_HAL_SetAddress10bit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_i2c_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_HAL_SetAddress10bit
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[1ad]"></a>I2C_HAL_ReadByteBlocking</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterReceiveDataPolling
</UL>

<P><STRONG><a name="[1aa]"></a>I2C_HAL_WriteByteBlocking</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterSendDataPolling
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterReceiveDataPolling
</UL>

<P><STRONG><a name="[1a8]"></a>I2C_HAL_MasterReceiveDataPolling</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStop
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStart
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_WriteByteBlocking
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ReadByteBlocking
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ReadByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetDirMode
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendNak
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendAck
</UL>

<P><STRONG><a name="[1af]"></a>I2C_HAL_MasterSendDataPolling</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStop
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStart
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_WriteByteBlocking
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetDirMode
</UL>

<P><STRONG><a name="[1b0]"></a>I2C_HAL_SlaveSendDataPolling</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ClearStartFlag
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_GetStartFlag
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ClearInt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_IsIntPending
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_GetStatusFlag
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetDirMode
</UL>

<P><STRONG><a name="[1b5]"></a>I2C_HAL_SlaveReceiveDataPolling</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ClearStartFlag
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_GetStartFlag
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ClearInt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_IsIntPending
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_GetStatusFlag
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ReadByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetDirMode
</UL>

<P><STRONG><a name="[1b8]"></a>LPTMR_HAL_SetPrescalerMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_lptmr_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_HAL_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeInit
</UL>

<P><STRONG><a name="[1b7]"></a>LPTMR_HAL_SetTimerWorkingMode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_lptmr_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_HAL_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeInit
</UL>

<P><STRONG><a name="[1b6]"></a>LPTMR_HAL_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fsl_lptmr_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_HAL_SetTimerWorkingMode
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_HAL_SetPrescalerMode
</UL>

<P><STRONG><a name="[1f1]"></a>LPTMR_HAL_GetCounterValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_lptmr_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeGetMsec
</UL>

<P><STRONG><a name="[1ba]"></a>CLOCK_HAL_TestOscFreq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetBlpeMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeeMode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>

<P><STRONG><a name="[1bc]"></a>CLOCK_HAL_TestFllExternalRefFreq</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeeMode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
</UL>

<P><STRONG><a name="[1bb]"></a>CLOCK_HAL_GetFllRefClk</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllExternalRefFreq
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFixedFreqClk
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
</UL>

<P><STRONG><a name="[1be]"></a>CLOCK_HAL_TestFllFreq</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_HAL_TestFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeeMode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeiMode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
</UL>

<P><STRONG><a name="[1bd]"></a>CLOCK_HAL_GetFllClk</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllFreq
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPllFllClockFreq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[1bf]"></a>CLOCK_HAL_UpdateFastClkInternalRefDiv</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_HAL_UpdateFastClkInternalRefDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClkMode
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetInternalRefClkMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetBlpiMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[35b]"></a>CLOCK_HAL_GetAvailableFrdiv</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, fsl_mcg_hal.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>CLOCK_HAL_CalculatePllDiv</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, fsl_mcg_hal.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>CLOCK_HAL_GetPll0RefFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_HAL_GetPll0RefFreq &rArr; CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
</UL>

<P><STRONG><a name="[1c3]"></a>CLOCK_HAL_GetPll0Clk</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_HAL_GetPll0Clk &rArr; CLOCK_HAL_GetPll0RefFreq &rArr; CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0RefFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSaiFreq
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPllFllClockFreq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[24b]"></a>CLOCK_HAL_EnablePll0InFllMode</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_HAL_EnablePll0InFllMode
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[1c5]"></a>CLOCK_HAL_GetInternalRefClk</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetLptmrFreq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[1c4]"></a>CLOCK_HAL_GetOutClk</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClk
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPeeMode
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFixedFreqClk
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetTraceFreq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFlexbusFreq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFlashClockFreq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
</UL>

<P><STRONG><a name="[1c6]"></a>CLOCK_HAL_GetFixedFreqClk</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_mcg_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[24f]"></a>CLOCK_HAL_SetOsc0Mode</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_HAL_SetOsc0Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscDeinit
</UL>

<P><STRONG><a name="[35d]"></a>CLOCK_HAL_EnableOsc0Monitor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_mcg_hal.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>CLOCK_HAL_EnableRtcOscMonitor</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_mcg_hal.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>CLOCK_HAL_TrimInternalRefClk</STRONG> (Thumb, 230 bytes, Stack size 20 bytes, fsl_mcg_hal.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>CLOCK_HAL_GetMcgMode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsPllSelected
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllSrc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPeeMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetBlpeMode
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetBlpiMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeeMode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeiMode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[1cd]"></a>CLOCK_HAL_SetFeiMode</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, fsl_mcg_hal_modes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllSrc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllFreq
</UL>

<P><STRONG><a name="[1ce]"></a>CLOCK_HAL_SetFeeMode</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, fsl_mcg_hal_modes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsOsc0Stable
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllSrc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllFreq
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllExternalRefFreq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestOscFreq
</UL>

<P><STRONG><a name="[1cf]"></a>CLOCK_HAL_SetFbiMode</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_HAL_SetFbiMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClkMode
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllSrc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_UpdateFastClkInternalRefDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[1d1]"></a>CLOCK_HAL_SetFbeMode</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_HAL_SetFbeMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsOsc0Stable
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsPllSelected
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllSrc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[1d2]"></a>CLOCK_HAL_SetBlpiMode</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_mcg_hal_modes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClkMode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_UpdateFastClkInternalRefDiv
</UL>

<P><STRONG><a name="[1d3]"></a>CLOCK_HAL_SetBlpeMode</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fsl_mcg_hal_modes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_PrepareOsc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestOscFreq
</UL>

<P><STRONG><a name="[1d4]"></a>CLOCK_HAL_SetPbeMode</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_HAL_SetPbeMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsPllSelected
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_PrepareOsc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[1d5]"></a>CLOCK_HAL_SetPeeMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_mcg_hal_modes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>

<P><STRONG><a name="[24e]"></a>OSC_HAL_SetCapacitor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_osc_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
</UL>

<P><STRONG><a name="[360]"></a>CLOCK_HAL_SetUsbfsDiv</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>CLOCK_HAL_GetUsbfsDiv</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUsbfsFreq
</UL>

<P><STRONG><a name="[216]"></a>CLOCK_HAL_SetOutDiv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_HAL_SetOutDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfigration
</UL>

<P><STRONG><a name="[361]"></a>CLOCK_HAL_GetOutDiv</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>SIM_HAL_SetAdcAlternativeTriggerCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1d7]"></a>SIM_HAL_GetAdcAlternativeTriggerCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1d8]"></a>SIM_HAL_SetAdcPreTriggerMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1d9]"></a>SIM_HAL_GetAdcPreTriggerMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1da]"></a>SIM_HAL_SetAdcTriggerMode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1db]"></a>SIM_HAL_GetAdcTriggerMode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1dc]"></a>SIM_HAL_SetAdcTriggerModeOneStep</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1dd]"></a>SIM_HAL_SetUartRxSrcMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1de]"></a>SIM_HAL_GetUartRxSrcMode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1df]"></a>SIM_HAL_SetUartTxSrcMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1e0]"></a>SIM_HAL_GetUartTxSrcMode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1e1]"></a>SIM_HAL_SetFtmTriggerSrcMode</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1e2]"></a>SIM_HAL_GetFtmTriggerSrcMode</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1e3]"></a>SIM_HAL_SetFtmExternalClkPinMode</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1e4]"></a>SIM_HAL_GetFtmExternalClkPinMode</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFtmExternalFreq
</UL>

<P><STRONG><a name="[1e5]"></a>SIM_HAL_SetFtmChSrcMode</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1e6]"></a>SIM_HAL_GetFtmChSrcMode</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1e7]"></a>SIM_HAL_SetFtmFaultSelMode</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1e8]"></a>SIM_HAL_GetFtmFaultSelMode</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, fsl_sim_hal_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[362]"></a>UART_HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>UART_HAL_SetBaudRate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_uart_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_HAL_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[1e9]"></a>UART_HAL_SetBaudRateDivisor</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_uart_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[255]"></a>UART_HAL_SetParityMode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[1ea]"></a>UART_HAL_Putchar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_SendDataPolling
</UL>

<P><STRONG><a name="[363]"></a>UART_HAL_Putchar9</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>UART_HAL_Getchar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_ReceiveDataPolling
</UL>

<P><STRONG><a name="[364]"></a>UART_HAL_Getchar9</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>UART_HAL_SendDataPolling</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_uart_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_HAL_SendDataPolling
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>UART_HAL_ReceiveDataPolling</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fsl_uart_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_HAL_ReceiveDataPolling
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_Getchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text)
</UL>
<P><STRONG><a name="[365]"></a>UART_HAL_SetIntMode</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>UART_HAL_GetIntMode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>UART_HAL_SetTxDmaCmd</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>UART_HAL_SetRxDmaCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>UART_HAL_SetISO7816IntMode</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>UART_HAL_GetISO7816IntMode</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>UART_HAL_ClearISO7816InterruptStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>UART_HAL_GetISO7816InterruptStatus</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>UART_HAL_SetISO7816Etu</STRONG> (Thumb, 106 bytes, Stack size 28 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>UART_HAL_ResetISO7816WaitTimer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>UART_HAL_ResetISO7816CharacterWaitTimer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>UART_HAL_ResetISO7816BlockWaitTimer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>UART_HAL_GetStatusFlag</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fsl_uart_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_PutReceiverInStandbyMode
</UL>

<P><STRONG><a name="[371]"></a>UART_HAL_ClearStatusFlag</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>UART_HAL_SetTxFifoCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>UART_HAL_SetRxFifoCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>UART_HAL_FlushTxFifo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>UART_HAL_FlushRxFifo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>UART_HAL_SetTxFifoWatermark</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>UART_HAL_SetRxFifoWatermark</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>UART_HAL_PutReceiverInStandbyMode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_uart_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_GetStatusFlag
</UL>

<P><STRONG><a name="[378]"></a>UART_HAL_ConfigIdleLineDetect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>UART_HAL_SetMatchAddress</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>UART_HAL_SetInfraredOperation</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_uart_hal.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>OSA_TimeInit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_HAL_SetTimerWorkingMode
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_HAL_SetPrescalerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_Init
</UL>

<P><STRONG><a name="[1f5]"></a>OSA_TimeDiff</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeDelay
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaWait
</UL>

<P><STRONG><a name="[1ef]"></a>OSA_SemaCreate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQCreate
</UL>

<P><STRONG><a name="[1f0]"></a>OSA_TimeGetMsec</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_HAL_GetCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeDelay
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaWait
</UL>

<P><STRONG><a name="[1f2]"></a>OSA_SemaWait</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeGetMsec
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeDiff
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQGet
</UL>

<P><STRONG><a name="[1f6]"></a>OSA_SemaPost</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQPut
</UL>

<P><STRONG><a name="[1f7]"></a>OSA_SemaDestroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQDestroy
</UL>

<P><STRONG><a name="[1f8]"></a>OSA_MutexCreate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1f9]"></a>OSA_MutexLock</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeGetMsec
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeDiff
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>

<P><STRONG><a name="[1fa]"></a>OSA_MutexUnlock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>

<P><STRONG><a name="[1fb]"></a>OSA_MutexDestroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1fc]"></a>OSA_EventCreate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1fd]"></a>OSA_EventWait</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeGetMsec
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeDiff
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>

<P><STRONG><a name="[1fe]"></a>OSA_EventGetFlags</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1ff]"></a>OSA_EventSet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>

<P><STRONG><a name="[200]"></a>OSA_EventClear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>

<P><STRONG><a name="[201]"></a>OSA_EventDestroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[213]"></a>task_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_Init
</UL>

<P><STRONG><a name="[37b]"></a>OSA_TaskCreate</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>OSA_TaskDestroy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[37c]"></a>OSA_TaskYield</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>OSA_TaskGetHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>OSA_TaskGetPriority</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>OSA_TaskSetPriority</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>OSA_MsgQCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaCreate
</UL>

<P><STRONG><a name="[204]"></a>OSA_MsgQPut</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaPost
</UL>

<P><STRONG><a name="[205]"></a>OSA_MsgQGet</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaWait
</UL>

<P><STRONG><a name="[206]"></a>OSA_MsgQDestroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaDestroy
</UL>

<P><STRONG><a name="[207]"></a>OSA_MemAlloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[209]"></a>OSA_MemAllocZero</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[20b]"></a>OSA_MemFree</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[20d]"></a>OSA_TimeDelay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeGetMsec
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeDiff
</UL>

<P><STRONG><a name="[20e]"></a>OSA_InstallIntHandler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_InstallHandler
</UL>

<P><STRONG><a name="[210]"></a>OSA_EnterCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
</UL>

<P><STRONG><a name="[211]"></a>OSA_ExitCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
</UL>

<P><STRONG><a name="[212]"></a>OSA_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_TimeInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[380]"></a>OSA_Start</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>OSA_PollAllOtherTasks</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fsl_os_abstraction_bm.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>CLOCK_SYS_GetCoreClockFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CLOCK_SYS_GetCoreClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSdhcFreq
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetEnetTimeStampFreq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetTraceFreq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_FllStableDelay
</UL>

<P><STRONG><a name="[147]"></a>CLOCK_SYS_SetConfiguration</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CLOCK_SYS_SetConfiguration &rArr; CLOCK_SYS_SetMcgMode &rArr; CLOCK_HAL_SetPbeMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetOscerConfigration
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfigration
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetOutDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
</UL>

<P><STRONG><a name="[21f]"></a>CLOCK_SYS_GetRtcOutFreq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[21e]"></a>CLOCK_SYS_GetOsc0ExternalRefClockFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSaiFreq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSdhcFreq
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFlexcanFreq
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetEnetTimeStampFreq
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetEnetRmiiFreq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetLptmrFreq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[21d]"></a>CLOCK_SYS_GetExternalRefClock32kFreq</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetLptmrFreq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[219]"></a>CLOCK_SYS_GetFlashClockFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[21a]"></a>CLOCK_SYS_GetFlexbusFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[12f]"></a>CLOCK_SYS_GetBusClockFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUartFreq
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFlexcanFreq
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPortFilterFreq
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetWdogFreq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[21b]"></a>CLOCK_SYS_GetSystemClockFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSaiFreq
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUartFreq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[21c]"></a>CLOCK_SYS_GetFreq</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFixedFreqClk
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClk
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFlexbusFreq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFlashClockFreq
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetExternalRefClock32kFreq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetOsc0ExternalRefClockFreq
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetRtcOutFreq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
</UL>

<P><STRONG><a name="[220]"></a>CLOCK_SYS_GetPllFllClockFreq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSdhcFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUsbfsFreq
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetEnetTimeStampFreq
</UL>

<P><STRONG><a name="[221]"></a>CLOCK_SYS_GetWdogFreq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
</UL>

<P><STRONG><a name="[222]"></a>CLOCK_SYS_GetTraceFreq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
</UL>

<P><STRONG><a name="[223]"></a>CLOCK_SYS_GetPortFilterFreq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
</UL>

<P><STRONG><a name="[224]"></a>CLOCK_SYS_GetLptmrFreq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetExternalRefClock32kFreq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetOsc0ExternalRefClockFreq
</UL>

<P><STRONG><a name="[225]"></a>CLOCK_SYS_GetEnetRmiiFreq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetOsc0ExternalRefClockFreq
</UL>

<P><STRONG><a name="[226]"></a>CLOCK_SYS_GetEnetTimeStampFreq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPllFllClockFreq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetOsc0ExternalRefClockFreq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
</UL>

<P><STRONG><a name="[227]"></a>CLOCK_SYS_GetUsbfsFreq</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPllFllClockFreq
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetUsbfsDiv
</UL>

<P><STRONG><a name="[229]"></a>CLOCK_SYS_GetFlexcanFreq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetOsc0ExternalRefClockFreq
</UL>

<P><STRONG><a name="[22a]"></a>CLOCK_SYS_GetUartFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CLOCK_SYS_GetUartFreq &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[22b]"></a>CLOCK_SYS_GetSdhcFreq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPllFllClockFreq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetOsc0ExternalRefClockFreq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
</UL>

<P><STRONG><a name="[22c]"></a>CLOCK_SYS_GetSaiFreq</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetOsc0ExternalRefClockFreq
</UL>

<P><STRONG><a name="[22d]"></a>CLOCK_SYS_GetFtmExternalFreq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetFtmExternalClkPinMode
</UL>

<P><STRONG><a name="[179]"></a>CLOCK_SYS_EnablePortClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CLOCK_SYS_EnablePortClock &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_InputPinInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_OutputPinInit
</UL>

<P><STRONG><a name="[22f]"></a>CLOCK_SYS_DisablePortClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_DisableClock
</UL>

<P><STRONG><a name="[231]"></a>CLOCK_SYS_GetPortGateCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetGateCmd
</UL>

<P><STRONG><a name="[233]"></a>CLOCK_SYS_EnableAdcClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
</UL>

<P><STRONG><a name="[234]"></a>CLOCK_SYS_DisableAdcClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_DisableClock
</UL>

<P><STRONG><a name="[235]"></a>CLOCK_SYS_GetAdcGateCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetGateCmd
</UL>

<P><STRONG><a name="[236]"></a>CLOCK_SYS_EnableDacClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
</UL>

<P><STRONG><a name="[237]"></a>CLOCK_SYS_DisableDacClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_DisableClock
</UL>

<P><STRONG><a name="[238]"></a>CLOCK_SYS_GetDacGateCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetGateCmd
</UL>

<P><STRONG><a name="[239]"></a>CLOCK_SYS_EnableFtmClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
</UL>

<P><STRONG><a name="[23a]"></a>CLOCK_SYS_DisableFtmClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_DisableClock
</UL>

<P><STRONG><a name="[23b]"></a>CLOCK_SYS_GetFtmGateCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetGateCmd
</UL>

<P><STRONG><a name="[23c]"></a>CLOCK_SYS_EnableSpiClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
</UL>

<P><STRONG><a name="[23d]"></a>CLOCK_SYS_DisableSpiClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_DisableClock
</UL>

<P><STRONG><a name="[23e]"></a>CLOCK_SYS_GetSpiGateCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetGateCmd
</UL>

<P><STRONG><a name="[23f]"></a>CLOCK_SYS_EnableI2cClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
</UL>

<P><STRONG><a name="[240]"></a>CLOCK_SYS_DisableI2cClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_DisableClock
</UL>

<P><STRONG><a name="[241]"></a>CLOCK_SYS_GetI2cGateCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetGateCmd
</UL>

<P><STRONG><a name="[242]"></a>CLOCK_SYS_EnableUartClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CLOCK_SYS_EnableUartClock &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[243]"></a>CLOCK_SYS_DisableUartClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_DeInit
</UL>

<P><STRONG><a name="[244]"></a>CLOCK_SYS_GetUartGateCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_GetGateCmd
</UL>

<P><STRONG><a name="[245]"></a>CLOCK_SYS_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_clock_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[246]"></a>CLOCK_SYS_UpdateConfiguration</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, fsl_clock_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>

<P><STRONG><a name="[382]"></a>CLOCK_SYS_GetCurrentConfiguration</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock_manager.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>CLOCK_SYS_GetErrorCallback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_clock_manager.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>CLOCK_SYS_SetMcgMode</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLOCK_SYS_SetMcgMode &rArr; CLOCK_HAL_SetPbeMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_EnablePll0InFllMode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_UpdateFastClkInternalRefDiv
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetLowPowerModeCmd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetClkOutSrc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgPeeToFbe
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>

<P><STRONG><a name="[218]"></a>CLOCK_SYS_SetOscerConfigration</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SYS_SetOscerConfigration
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_HAL_SetExternalRefClkInStopModeCmd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_HAL_SetExternalRefClkCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
</UL>

<P><STRONG><a name="[143]"></a>CLOCK_SYS_OscInit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLOCK_SYS_OscInit &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetOsc0Mode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetOscerConfigration
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_HAL_SetCapacitor
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitOsc0
</UL>

<P><STRONG><a name="[250]"></a>CLOCK_SYS_OscDeinit</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, fsl_clock_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetOsc0Mode
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_HAL_SetExternalRefClkInStopModeCmd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_HAL_SetExternalRefClkCmd
</UL>

<P><STRONG><a name="[145]"></a>CLOCK_SYS_RtcOscInit</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLOCK_SYS_RtcOscInit &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_HAL_SetOscillatorCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitRtcOsc
</UL>

<P><STRONG><a name="[252]"></a>CLOCK_SYS_RtcOscDeinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_clock_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_HAL_SetOscillatorCmd
</UL>

<P><STRONG><a name="[20f]"></a>INT_SYS_InstallHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fsl_interrupt_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_InstallIntHandler
</UL>

<P><STRONG><a name="[1f4]"></a>INT_SYS_EnableIRQGlobal</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_interrupt_manager.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQGet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQPut
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventClear
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaPost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaWait
</UL>

<P><STRONG><a name="[1f3]"></a>INT_SYS_DisableIRQGlobal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_interrupt_manager.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQGet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MsgQPut
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventClear
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaPost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_SemaWait
</UL>

<P><STRONG><a name="[149]"></a>DbgConsole_Init</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, fsl_debug_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = DbgConsole_Init &rArr; CLOCK_SYS_GetUartFreq &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableUartClock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUartFreq
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_SetParityMode
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
</UL>

<P><STRONG><a name="[256]"></a>DbgConsole_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_debug_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableUartClock
</UL>

<P><STRONG><a name="[257]"></a>debug_printf</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fsl_debug_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doprint
</UL>

<P><STRONG><a name="[259]"></a>debug_putchar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_debug_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_putc
</UL>

<P><STRONG><a name="[25b]"></a>debug_getchar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_debug_console.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_scanf
</UL>

<P><STRONG><a name="[25a]"></a>debug_scanf</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, fsl_debug_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_prv
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_getchar
</UL>

<P><STRONG><a name="[258]"></a>_doprint</STRONG> (Thumb, 1378 bytes, Stack size 152 bytes, print_scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mknumstr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fput_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>

<P><STRONG><a name="[384]"></a>_sputc</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, print_scan.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>scan_prv</STRONG> (Thumb, 1300 bytes, Stack size 64 bytes, print_scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_ignore_white_space
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_scanf
</UL>

<P><STRONG><a name="[dd]"></a>hardware_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hardware_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = hardware_init &rArr; dbg_uart_init &rArr; DbgConsole_Init &rArr; CLOCK_SYS_GetUartFreq &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_i2c_pins
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gpio_pins
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_enet_pins
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>FTFE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>FTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>PIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>SDHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>UART0_LON_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SystemInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, system_mk64f12.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 426 bytes, Stack size 0 bytes, system_mk64f12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[260]"></a>net_sys_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_sys_init &rArr; eth_init_link &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_socket_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_client_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_service_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
</UL>

<P><STRONG><a name="[269]"></a>net_sys_run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = net_sys_run &rArr; dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_service_run
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_main
</UL>

<P><STRONG><a name="[2db]"></a>igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[2ab]"></a>igmp_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[2e0]"></a>ppp_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[2e1]"></a>slip_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[385]"></a>sntp_get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>http_server_fopen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[2bb]"></a>http_server_fclose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2d4]"></a>http_server_fread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2fd]"></a>http_server_fgets</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
</UL>

<P><STRONG><a name="[2c5]"></a>http_server_ftime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[270]"></a>net_sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>

<P><STRONG><a name="[271]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[2cc]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[253]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[386]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[387]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetBufDescripAttr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigScatterGatherTransfer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigLoopTransfer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_Init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_socket_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_init
</UL>

<P><STRONG><a name="[389]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_script
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doprint
</UL>

<P><STRONG><a name="[2c8]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[2f8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[20a]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemAllocZero
</UL>

<P><STRONG><a name="[277]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[38a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[38b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[279]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[38c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[27b]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[38d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38f]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[da]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message
</UL>

<P><STRONG><a name="[280]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[390]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[d9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_script
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_ntoa
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_notify
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[391]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[20c]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc2.o(i.__free$2region), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemFree
</UL>

<P><STRONG><a name="[208]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc2.o(i.__malloc$2region), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemAlloc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[392]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[393]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[394]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[31e]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[284]"></a>arp_cache_add</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, net_arp.o(i.arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arp_cache_add &rArr; arp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[288]"></a>arp_cache_early</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_arp.o(i.arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_cache_early &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[28a]"></a>arp_cache_find</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, net_arp.o(i.arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[28b]"></a>arp_cache_update</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, net_arp.o(i.arp_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arp_cache_update &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[2a6]"></a>arp_init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, net_arp.o(i.arp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[28c]"></a>arp_notify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_arp.o(i.arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_notify &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
</UL>

<P><STRONG><a name="[28d]"></a>arp_probe</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_arp.o(i.arp_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_probe &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
</UL>

<P><STRONG><a name="[28e]"></a>arp_process</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, net_arp.o(i.arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = arp_process &rArr; arp_cache_add &rArr; arp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[2c6]"></a>b64_to_asc</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, net_common.o(i.b64_to_asc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = b64_to_asc
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[2b9]"></a>cgi_content_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.cgi_content_type))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_ftype
</UL>

<P><STRONG><a name="[2d7]"></a>chksum16</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, net_common.o(i.chksum16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[31d]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[324]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[31b]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[268]"></a>dhcp_client_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, net_dhcp_client.o(i.dhcp_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_client_init &rArr; udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rnd32
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[26f]"></a>dhcp_client_run</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, net_dhcp_client.o(i.dhcp_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_notify
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rnd32
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[2dc]"></a>eth_chk_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_eth.o(i.eth_chk_addr))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[261]"></a>eth_init_link</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, net_eth.o(i.eth_init_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eth_init_link &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_notify
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_crc32
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[2a4]"></a>eth_link_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.eth_link_notify))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
</UL>

<P><STRONG><a name="[26a]"></a>eth_run_link</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, net_eth.o(i.eth_run_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = eth_run_link &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_process
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_fetch_frame
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[2ae]"></a>eth_send_frame</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, net_eth.o(i.eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[64]"></a>eth_thread</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_eth.o(i.eth_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = eth_thread &rArr;  eth_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_thread
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_fetch_frame
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_eth.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[29b]"></a>get_rnd32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_sys.o(i.get_rnd32))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2bc]"></a>http_accept_client</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.http_accept_client))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2c9]"></a>http_check_account</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.http_check_account))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[2c3]"></a>http_file_access</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.http_file_access))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[ec]"></a>http_get_env_var</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, net_http_server.o(i.http_get_env_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_query
</UL>

<P><STRONG><a name="[266]"></a>http_server_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_http_server.o(i.http_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_server_init &rArr; tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[26e]"></a>http_server_run</STRONG> (Thumb, 808 bytes, Stack size 40 bytes, net_http_server.o(i.http_server_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = http_server_run &rArr; tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_script
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_avail
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_max_data_size
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_state
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fread
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[2aa]"></a>icmp_process</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, net_icmp.o(i.icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icmp_process &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[263]"></a>icmp_service_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_icmp.o(i.icmp_service_init))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[26c]"></a>icmp_service_run</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net_icmp.o(i.icmp_service_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icmp_service_run &rArr; icmp_send_message &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[33b]"></a>ip4_checksum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, net_ip.o(i.ip4_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[d8]"></a>ip4_ntoa</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_addr4.o(i.ip4_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip4_ntoa &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_notify
</UL>

<P><STRONG><a name="[2a9]"></a>ip_chk_frame</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, net_ip.o(i.ip_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ip_chk_frame &rArr; ip_get_chksum &rArr; chksum16
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_is_member
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[2de]"></a>ip_get_locadr</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, net_ip.o(i.ip_get_locadr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ip_get_locadr &rArr; ip_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[262]"></a>ip_localhost_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_ip.o(i.ip_localhost_init))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[26b]"></a>ip_localhost_run</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, net_ip.o(i.ip_localhost_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ip_localhost_run &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[2d8]"></a>ip_send_frame</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, net_ip.o(i.ip_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slip_send_frame
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[2da]"></a>ip_tx_offload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net_ip.o(i.ip_tx_offload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip_tx_offload &rArr; ip_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
</UL>

<P><STRONG><a name="[286]"></a>is_subnet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr4.o(i.is_subnet))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_route
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[2af]"></a>is_subnet_bcast</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_ip.o(i.is_subnet_bcast))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[2e2]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[2e4]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[2e7]"></a>isrSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.isrSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[2ea]"></a>isrSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[2ec]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[2e3]"></a>isr_mbx_receive</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[2e6]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[2e9]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[291]"></a>mem_alloc</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_mem.o(i.mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_fetch_frame
</UL>

<P><STRONG><a name="[2d0]"></a>mem_avail</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_mem.o(i.mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2a7]"></a>mem_crc32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_common.o(i.mem_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[292]"></a>mem_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[2f2]"></a>mem_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, net_mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_init &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
</UL>

<P><STRONG><a name="[2f5]"></a>mem_resize</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_mem.o(i.mem_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_resize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
</UL>

<P><STRONG><a name="[267]"></a>nbns_client_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_nbns_client.o(i.nbns_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nbns_client_init &rArr; udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[e2]"></a>net_initialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net_sys.o(i.net_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = net_initialize &rArr; net_sys_init &rArr; eth_init_link &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>net_main</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, net_sys.o(i.net_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = net_main &rArr; net_sys_run &rArr; dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkLed
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message
</UL>

<P><STRONG><a name="[ca]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fb]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[2f3]"></a>osMutexCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[2f6]"></a>osMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[2f4]"></a>osMutexWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexWait))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[f7]"></a>osSemaphoreCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[fb]"></a>osSemaphoreRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magnetometer_GetState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelerometer_GetState
</UL>

<P><STRONG><a name="[fa]"></a>osSemaphoreWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreWait))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magnetometer_GetState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelerometer_GetState
</UL>

<P><STRONG><a name="[2a8]"></a>osSignalSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_notify
</UL>

<P><STRONG><a name="[2b0]"></a>osSignalWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalWait))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_thread
</UL>

<P><STRONG><a name="[cb]"></a>osThreadCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[26]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[e5]"></a>osThreadYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fc]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[2f9]"></a>osTimerCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_cmsis.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
</UL>

<P><STRONG><a name="[2fa]"></a>osTimerStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
</UL>

<P><STRONG><a name="[2a]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[321]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[d1]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[2]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[330]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[2fe]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[302]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[304]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[305]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[307]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[308]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_evt_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[30b]"></a>rt_evt_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[30c]"></a>rt_evt_wait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[3]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[331]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[300]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[328]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_same_rdy_prio))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[32b]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[31f]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[30e]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[2e5]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[32d]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[30f]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[312]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[32e]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[313]"></a>rt_mut_release</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>

<P><STRONG><a name="[314]"></a>rt_mut_wait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>

<P><STRONG><a name="[ce]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[2ee]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[2ed]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[2ff]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[303]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[306]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[315]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>

<P><STRONG><a name="[310]"></a>rt_ret_val</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[30a]"></a>rt_ret_val2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[309]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[317]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[32f]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[316]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[319]"></a>rt_sem_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[31a]"></a>rt_sem_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[cd]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[301]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[31c]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[320]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[cf]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[323]"></a>rt_tsk_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[325]"></a>rt_tsk_delete</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[327]"></a>rt_tsk_pass</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[329]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[332]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[2a1]"></a>str_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_common.o(i.str_copy))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[2c7]"></a>str_pos</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_common.o(i.str_pos))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[295]"></a>str_scomp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_common.o(i.str_scomp))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[2f7]"></a>str_up_case</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_common.o(i.str_up_case))
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[12]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[13]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[14]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[32c]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[15]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[16]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexCreate)
</UL>
<P><STRONG><a name="[17]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[18]"></a>svcMutexWait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexWait)
</UL>
<P><STRONG><a name="[19]"></a>svcSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreCreate)
</UL>
<P><STRONG><a name="[1a]"></a>svcSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[1b]"></a>svcSemaphoreWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreWait)
</UL>
<P><STRONG><a name="[1c]"></a>svcSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalSet)
</UL>
<P><STRONG><a name="[1d]"></a>svcSignalWait</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalWait)
</UL>
<P><STRONG><a name="[1e]"></a>svcThreadCreate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[1f]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[20]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[21]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadYield)
</UL>
<P><STRONG><a name="[22]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[23]"></a>svcTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCreate)
</UL>
<P><STRONG><a name="[24]"></a>svcTimerStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcTimerStart &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[322]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[2d6]"></a>tcp_abort</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2d1]"></a>tcp_close</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_close &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2d3]"></a>tcp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_get_buf &rArr; mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2cd]"></a>tcp_get_socket</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_init
</UL>

<P><STRONG><a name="[2cf]"></a>tcp_get_state</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2ce]"></a>tcp_listen</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_init
</UL>

<P><STRONG><a name="[2d2]"></a>tcp_max_data_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_max_data_size))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2ad]"></a>tcp_process</STRONG> (Thumb, 1178 bytes, Stack size 48 bytes, net_tcp.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rnd32
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[2d5]"></a>tcp_send</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_resize
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[265]"></a>tcp_socket_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_socket_init))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[26d]"></a>tcp_socket_poll</STRONG> (Thumb, 634 bytes, Stack size 32 bytes, net_tcp.o(i.tcp_socket_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_socket_poll &rArr; tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_avail
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[2a0]"></a>udp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_udp.o(i.udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_get_buf &rArr; mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[299]"></a>udp_get_socket</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, net_udp.o(i.udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_client_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_init
</UL>

<P><STRONG><a name="[29a]"></a>udp_open</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, net_udp.o(i.udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_client_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_init
</UL>

<P><STRONG><a name="[2ac]"></a>udp_process</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, net_udp.o(i.udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_process &rArr; ip4_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[2a2]"></a>udp_send</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, net_udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_tx_offload
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_checksum
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[264]"></a>udp_socket_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_udp.o(i.udp_socket_init))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[28]"></a>Message</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Message &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>BlinkLed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, blinky.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BlinkLed &rArr; LED_SetOut &rArr; LED_On &rArr; GPIO_DRV_WritePinOutput &rArr; GPIO_HAL_WritePinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>crc32_8bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageFileInfo
</UL>

<P><STRONG><a name="[f8]"></a>Register_Read</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fxos8700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Register_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[f9]"></a>Register_Write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fxos8700.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Register_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[ff]"></a>crc32_8bit_rev</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>

<P><STRONG><a name="[fe]"></a>crc32_data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddressFilter
</UL>

<P><STRONG><a name="[2b]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>Initialize</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetRmiiSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>Uninitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetRmiiSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>PowerControl</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = PowerControl &rArr; ENET_HAL_Config &rArr; ENET_HAL_SetMac &rArr; ENET_HAL_SetSMI &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>GetMacAddress</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>SetMacAddress</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>SetAddressFilter</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetAddressFilter &rArr; crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetMulticastAddrHash
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>SendFrame</STRONG> (Thumb, 518 bytes, Stack size 64 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SendFrame &rArr; ENET_HAL_GetBufDescripAttr &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetBuffDescripData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetBufDescripAttr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>ReadFrame</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ReadFrame &rArr; ENET_HAL_GetBuffDescripData &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetBuffDescripData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_ClrRxBdAfterHandled
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetRxBdActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>GetRxFrameSize</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GetRxFrameSize &rArr; ENET_HAL_GetBufDescripAttr &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetBufDescripAttr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>GetRxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>GetTxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>Control</STRONG> (Thumb, 718 bytes, Stack size 24 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Control &rArr; ENET_HAL_Config &rArr; ENET_HAL_SetMac &rArr; ENET_HAL_SetSMI &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetIntMode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_ClrRxBdAfterHandled
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetRxBdActive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>ControlTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>PHY_Read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PHY_Read &rArr; ENET_HAL_SetSMIRead
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetSMIRead
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetIntStatusFlag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_ClearIntStatusFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>PHY_Write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, emac_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PHY_Write &rArr; ENET_HAL_SetSMIWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetSMIWrite
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetIntStatusFlag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_ClearIntStatusFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[102]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[101]"></a>CLOCK_HAL_SetRmiiSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[109]"></a>ENET_HAL_SetRxBdActive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrame
</UL>

<P><STRONG><a name="[10b]"></a>ENET_HAL_ClearIntStatusFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Error_IRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Receive_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Transmit_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[10d]"></a>ENET_HAL_GetIntStatusFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, emac_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Error_IRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Receive_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Transmit_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[10f]"></a>PORT_HAL_SetOpenDrainCmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetOpenDrainCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[110]"></a>PORT_HAL_SetMuxMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[111]"></a>GPIO_HAL_SetPinOutput</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_HAL_SetPinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[112]"></a>GPIO_HAL_ClearPinOutput</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_HAL_ClearPinOutput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[113]"></a>GPIO_HAL_ReadPinInput</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_HAL_ReadPinInput &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[114]"></a>EDMA_HAL_STCDSetBandwidth</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EDMA_HAL_STCDSetBandwidth &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>

<P><STRONG><a name="[115]"></a>EDMA_HAL_STCDSetChannelMajorLink</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EDMA_HAL_STCDSetChannelMajorLink &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>

<P><STRONG><a name="[116]"></a>EDMA_HAL_STCDSetScatterGatherCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EDMA_HAL_STCDSetScatterGatherCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>

<P><STRONG><a name="[117]"></a>EDMA_HAL_STCDSetDisableDmaRequestAfterTCDDoneCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EDMA_HAL_STCDSetDisableDmaRequestAfterTCDDoneCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>

<P><STRONG><a name="[118]"></a>EDMA_HAL_STCDSetHalfCompleteIntCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EDMA_HAL_STCDSetHalfCompleteIntCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>

<P><STRONG><a name="[119]"></a>EDMA_DRV_PrepareDescriptorTransfer</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = EDMA_DRV_PrepareDescriptorTransfer &rArr; EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetBasicTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>

<P><STRONG><a name="[3c]"></a>I2CX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CX_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>I2CX_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>PTx_Base</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[4]"></a>I2Cx_DMA_Callback</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2Cx_DMA_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ReadByte
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendNak
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetDmaCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>I2C_Initialize</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = I2C_Initialize &rArr; EDMA_DRV_RequestChannel &rArr; EDMA_DRV_ClaimChannel &rArr; DMAMUX_HAL_SetChannelCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_RequestChannel
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_InstallCallback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetOpenDrainCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Initialize
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Initialize
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Initialize
</UL>

<P><STRONG><a name="[139]"></a>I2C_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Uninitialize
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Uninitialize
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Uninitialize
</UL>

<P><STRONG><a name="[122]"></a>I2C_PowerControl</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_PowerControl &rArr; I2C_HAL_SendStop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetIntCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_IsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_PowerControl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_PowerControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_PowerControl
</UL>

<P><STRONG><a name="[127]"></a>I2C_MasterTransmit</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = I2C_MasterTransmit &rArr; EDMA_DRV_PrepareDescriptorTransfer &rArr; EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStart
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_StartChannel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PushDescriptorToReg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PrepareDescriptorTransfer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetHalfCompleteIntCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetDisableDmaRequestAfterTCDDoneCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetScatterGatherCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetChannelMajorLink
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MasterTransmit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MasterTransmit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_MasterTransmit
</UL>

<P><STRONG><a name="[12b]"></a>I2C_MasterReceive</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = I2C_MasterReceive &rArr; EDMA_DRV_PrepareDescriptorTransfer &rArr; EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStart
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_StartChannel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PushDescriptorToReg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_PrepareDescriptorTransfer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetHalfCompleteIntCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetDisableDmaRequestAfterTCDDoneCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetScatterGatherCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetChannelMajorLink
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MasterReceive
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MasterReceive
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_MasterReceive
</UL>

<P><STRONG><a name="[13a]"></a>I2C_SlaveTransmit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SlaveTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SlaveTransmit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_SlaveTransmit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_SlaveTransmit
</UL>

<P><STRONG><a name="[13b]"></a>I2C_SlaveReceive</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SlaveReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SlaveReceive
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_SlaveReceive
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_SlaveReceive
</UL>

<P><STRONG><a name="[13c]"></a>I2C_GetDataCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GetDataCount
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_GetDataCount
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_GetDataCount
</UL>

<P><STRONG><a name="[12c]"></a>I2C_Control</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = I2C_Control &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetBaudRate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetAddress7bit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetAddress10bit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinDir
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetIntCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_IsMaster
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTx_Base
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_ReadPinInput
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_ClearPinOutput
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HAL_SetPinOutput
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Control
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Control
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Control
</UL>

<P><STRONG><a name="[13d]"></a>I2C_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GetStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_GetStatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_GetStatus
</UL>

<P><STRONG><a name="[133]"></a>I2Cx_IRQHandler</STRONG> (Thumb, 1192 bytes, Stack size 32 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = I2Cx_IRQHandler &rArr; I2C_HAL_SendStop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStop
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStart
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ClearInt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_GetStatusFlag
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_WriteByte
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_ReadByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetDirMode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendNak
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendAck
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SetDmaCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>I2C0_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = I2C0_Initialize &rArr; I2C_Initialize &rArr; EDMA_DRV_RequestChannel &rArr; EDMA_DRV_ClaimChannel &rArr; DMAMUX_HAL_SetChannelCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>I2C0_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>I2C0_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C0_PowerControl &rArr; I2C_PowerControl &rArr; I2C_HAL_SendStop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>I2C0_MasterTransmit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = I2C0_MasterTransmit &rArr; I2C_MasterTransmit &rArr; EDMA_DRV_PrepareDescriptorTransfer &rArr; EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>I2C0_MasterReceive</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = I2C0_MasterReceive &rArr; I2C_MasterReceive &rArr; EDMA_DRV_PrepareDescriptorTransfer &rArr; EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>I2C0_SlaveTransmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_SlaveTransmit &rArr; I2C_SlaveTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>I2C0_SlaveReceive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_SlaveReceive &rArr; I2C_SlaveReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>I2C0_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>I2C0_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = I2C0_Control &rArr; I2C_Control &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>I2C0_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = I2C1_Initialize &rArr; I2C_Initialize &rArr; EDMA_DRV_RequestChannel &rArr; EDMA_DRV_ClaimChannel &rArr; DMAMUX_HAL_SetChannelCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>I2C1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>I2C1_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C1_PowerControl &rArr; I2C_PowerControl &rArr; I2C_HAL_SendStop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_MasterTransmit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = I2C1_MasterTransmit &rArr; I2C_MasterTransmit &rArr; EDMA_DRV_PrepareDescriptorTransfer &rArr; EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>I2C1_MasterReceive</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = I2C1_MasterReceive &rArr; I2C_MasterReceive &rArr; EDMA_DRV_PrepareDescriptorTransfer &rArr; EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>I2C1_SlaveTransmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_SlaveTransmit &rArr; I2C_SlaveTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_SlaveReceive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_SlaveReceive &rArr; I2C_SlaveReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>I2C1_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = I2C1_Control &rArr; I2C_Control &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>I2C1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = I2C2_Initialize &rArr; I2C_Initialize &rArr; EDMA_DRV_RequestChannel &rArr; EDMA_DRV_ClaimChannel &rArr; DMAMUX_HAL_SetChannelCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>I2C2_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>I2C2_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C2_PowerControl &rArr; I2C_PowerControl &rArr; I2C_HAL_SendStop &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>I2C2_MasterTransmit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = I2C2_MasterTransmit &rArr; I2C_MasterTransmit &rArr; EDMA_DRV_PrepareDescriptorTransfer &rArr; EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>I2C2_MasterReceive</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = I2C2_MasterReceive &rArr; I2C_MasterReceive &rArr; EDMA_DRV_PrepareDescriptorTransfer &rArr; EDMA_HAL_STCDSetBasicTransfer &rArr; EDMA_HAL_STCDSetAttribute &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>I2C2_SlaveTransmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2_SlaveTransmit &rArr; I2C_SlaveTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>I2C2_SlaveReceive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2_SlaveReceive &rArr; I2C_SlaveReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>I2C2_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>I2C2_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = I2C2_Control &rArr; I2C_Control &rArr; CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>I2C2_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_mk64f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_mk64f.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>I2C_HAL_SetDmaCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_DMA_Callback
</UL>

<P><STRONG><a name="[138]"></a>I2C_HAL_SendAck</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>I2C_HAL_SendNak</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_DMA_Callback
</UL>

<P><STRONG><a name="[135]"></a>I2C_HAL_SetDirMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>I2C_HAL_ReadByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_DMA_Callback
</UL>

<P><STRONG><a name="[136]"></a>I2C_HAL_WriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>I2C_HAL_GetStatusFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>I2C_HAL_IsMaster</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>

<P><STRONG><a name="[123]"></a>I2C_HAL_SetIntCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>

<P><STRONG><a name="[134]"></a>I2C_HAL_ClearInt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_mk64f.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, phy_ksz8081rna.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081rna.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, phy_ksz8081rna.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081rna.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>Uninitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phy_ksz8081rna.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081rna.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>PowerControl</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, phy_ksz8081rna.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081rna.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>SetInterface</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, phy_ksz8081rna.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081rna.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>SetMode</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, phy_ksz8081rna.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081rna.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>GetLinkState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, phy_ksz8081rna.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081rna.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>GetLinkInfo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, phy_ksz8081rna.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081rna.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>stdout_putchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[14a]"></a>PORT_HAL_SetPullMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetPullMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_sdhc_pins
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gpio_pins
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_enet_pins
</UL>

<P><STRONG><a name="[14b]"></a>PORT_HAL_SetPullCmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetPullCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_sdhc_pins
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gpio_pins
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_enet_pins
</UL>

<P><STRONG><a name="[14c]"></a>PORT_HAL_SetSlewRateMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetSlewRateMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gpio_pins
</UL>

<P><STRONG><a name="[14d]"></a>PORT_HAL_SetPassiveFilterCmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetPassiveFilterCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gpio_pins
</UL>

<P><STRONG><a name="[14e]"></a>PORT_HAL_SetOpenDrainCmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetOpenDrainCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_i2c_pins
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_enet_pins
</UL>

<P><STRONG><a name="[14f]"></a>PORT_HAL_SetDriveStrengthMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetDriveStrengthMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_sdhc_pins
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gpio_pins
</UL>

<P><STRONG><a name="[150]"></a>PORT_HAL_SetMuxMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pin_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_ftm_pins
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gpio_i2c_pins
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_spi_cs1_pins
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_spi_cs0_pins
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_spi_pins
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_sdhc_pins
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_rtc_pins
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_i2s_pins
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_i2c_pins
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gpio_pins
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_enet_pins
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_cmp_pins
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_can_pins
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart_pins
</UL>

<P><STRONG><a name="[15e]"></a>DMAMUX_HAL_SetChannelCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_edma_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMAMUX_HAL_SetChannelCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ClaimChannel
</UL>

<P><STRONG><a name="[15f]"></a>EDMA_DRV_PrepareDescriptorTransfer</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetBasicTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigScatterGatherTransfer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigLoopTransfer
</UL>

<P><STRONG><a name="[163]"></a>SIM_HAL_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_Init
</UL>

<P><STRONG><a name="[169]"></a>SIM_HAL_DisableClock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_Deinit
</UL>

<P><STRONG><a name="[160]"></a>INT_SYS_EnableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_Init
</UL>

<P><STRONG><a name="[161]"></a>INT_SYS_DisableIRQ</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_Deinit
</UL>

<P><STRONG><a name="[16a]"></a>EDMA_DRV_ClaimChannel</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, fsl_edma_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = EDMA_DRV_ClaimChannel &rArr; DMAMUX_HAL_SetChannelCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_SetErrorIntCmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_HTCDClearReg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_HAL_SetChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_RequestChannel
</UL>

<P><STRONG><a name="[16e]"></a>EDMA_DRV_ClearIntStatus</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, fsl_edma_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EDMA_DRV_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ErrorIRQHandler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>EDMA_DRV_PrepareDescriptorScatterGather</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fsl_edma_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HAL_STCDSetScatterGatherLink
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigScatterGatherTransfer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigLoopTransfer
</UL>

<P><STRONG><a name="[176]"></a>PORT_HAL_SetMuxMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_gpio_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_InputPinInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_OutputPinInit
</UL>

<P><STRONG><a name="[177]"></a>PORT_HAL_SetDigitalFilterCmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_gpio_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PORT_HAL_SetDigitalFilterCmd &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetDigitalFilterCmd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_InputPinInit
</UL>

<P><STRONG><a name="[194]"></a>ENET_HAL_SetSMI</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ENET_HAL_SetSMI &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetMac
</UL>

<P><STRONG><a name="[195]"></a>ENET_HAL_SetMacAddr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ENET_HAL_SetMacAddr &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetMac
</UL>

<P><STRONG><a name="[196]"></a>ENET_HAL_SetTxInterPacketGap</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ENET_HAL_SetTxInterPacketGap &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetMac
</UL>

<P><STRONG><a name="[198]"></a>ENET_HAL_SetMac</STRONG> (Thumb, 600 bytes, Stack size 48 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ENET_HAL_SetMac &rArr; ENET_HAL_SetSMI &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetRMIIMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetTxInterPacketGap
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetMacAddr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetSMI
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Config
</UL>

<P><STRONG><a name="[199]"></a>ENET_HAL_InitTxBuffDescriptors</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ENET_HAL_InitTxBuffDescriptors &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetTxBuffDescriptors
</UL>

<P><STRONG><a name="[19a]"></a>ENET_HAL_SetTxBuffDescriptors</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ENET_HAL_SetTxBuffDescriptors &rArr; ENET_HAL_InitTxBuffDescriptors &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_InitTxBuffDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Config
</UL>

<P><STRONG><a name="[19b]"></a>ENET_HAL_InitRxBuffDescriptors</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ENET_HAL_InitRxBuffDescriptors &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetRxBuffDescriptors
</UL>

<P><STRONG><a name="[19c]"></a>ENET_HAL_SetRxBuffDescriptors</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ENET_HAL_SetRxBuffDescriptors &rArr; ENET_HAL_InitRxBuffDescriptors &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_InitRxBuffDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Config
</UL>

<P><STRONG><a name="[19d]"></a>ENET_HAL_Set1588Timer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Start1588Timer
</UL>

<P><STRONG><a name="[19f]"></a>ENET_HAL_SetRxFifo</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ENET_HAL_SetRxFifo &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetFifo
</UL>

<P><STRONG><a name="[1a0]"></a>ENET_HAL_SetTxFifo</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ENET_HAL_SetTxFifo &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetFifo
</UL>

<P><STRONG><a name="[1a1]"></a>ENET_HAL_SetFifo</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, fsl_enet_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ENET_HAL_SetFifo &rArr; ENET_HAL_SetTxFifo &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetTxFifo
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_SetRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_Config
</UL>

<P><STRONG><a name="[1a2]"></a>ENET_HAL_GetMibRxStat</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetStatus
</UL>

<P><STRONG><a name="[1a3]"></a>ENET_HAL_GetMibTxStat</STRONG> (Thumb, 592 bytes, Stack size 16 bytes, fsl_enet_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HAL_GetStatus
</UL>

<P><STRONG><a name="[1ac]"></a>I2C_HAL_SendAck</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterReceiveDataPolling
</UL>

<P><STRONG><a name="[1ab]"></a>I2C_HAL_SendNak</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterReceiveDataPolling
</UL>

<P><STRONG><a name="[1a9]"></a>I2C_HAL_SetDirMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveReceiveDataPolling
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveSendDataPolling
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterSendDataPolling
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterReceiveDataPolling
</UL>

<P><STRONG><a name="[1ae]"></a>I2C_HAL_ReadByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveReceiveDataPolling
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_MasterReceiveDataPolling
</UL>

<P><STRONG><a name="[1a7]"></a>I2C_HAL_GetStatusFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SendStop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveReceiveDataPolling
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveSendDataPolling
</UL>

<P><STRONG><a name="[1b3]"></a>I2C_HAL_IsIntPending</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveReceiveDataPolling
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveSendDataPolling
</UL>

<P><STRONG><a name="[1b4]"></a>I2C_HAL_ClearInt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveReceiveDataPolling
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveSendDataPolling
</UL>

<P><STRONG><a name="[1b1]"></a>I2C_HAL_GetStartFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveReceiveDataPolling
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveSendDataPolling
</UL>

<P><STRONG><a name="[1b2]"></a>I2C_HAL_ClearStartFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_i2c_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveReceiveDataPolling
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HAL_SlaveSendDataPolling
</UL>

<P><STRONG><a name="[1b9]"></a>CLOCK_HAL_GetMcgExternalClkFreq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0RefFreq
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
</UL>

<P><STRONG><a name="[1c0]"></a>CLOCK_HAL_SetInternalRefClkMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_UpdateFastClkInternalRefDiv
</UL>

<P><STRONG><a name="[1c1]"></a>CLOCK_HAL_GetInternalRefClkMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_mcg_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_UpdateFastClkInternalRefDiv
</UL>

<P><STRONG><a name="[1cb]"></a>CLOCK_HAL_PrepareOsc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_HAL_PrepareOsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsOsc0Stable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetBlpeMode
</UL>

<P><STRONG><a name="[1c8]"></a>CLOCK_HAL_GetClkOutStat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPeeMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeeMode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeiMode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
</UL>

<P><STRONG><a name="[1c9]"></a>CLOCK_HAL_GetFllSrc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeeMode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeiMode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
</UL>

<P><STRONG><a name="[1d0]"></a>CLOCK_HAL_GetInternalRefClkMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetBlpiMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
</UL>

<P><STRONG><a name="[1ca]"></a>CLOCK_HAL_IsPllSelected</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
</UL>

<P><STRONG><a name="[1cc]"></a>CLOCK_HAL_IsOsc0Stable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFeeMode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_PrepareOsc
</UL>

<P><STRONG><a name="[22e]"></a>SIM_HAL_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_HAL_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableUartClock
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableI2cClock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableSpiClock
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableFtmClock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableDacClock
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableAdcClock
</UL>

<P><STRONG><a name="[230]"></a>SIM_HAL_DisableClock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableUartClock
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableI2cClock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableSpiClock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableFtmClock
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableDacClock
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisableAdcClock
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_DisablePortClock
</UL>

<P><STRONG><a name="[232]"></a>SIM_HAL_GetGateCmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_clock_mk64f12.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUartGateCmd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetI2cGateCmd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSpiGateCmd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFtmGateCmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetDacGateCmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetAdcGateCmd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPortGateCmd
</UL>

<P><STRONG><a name="[5]"></a>CLOCK_SYS_FllStableDelay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CLOCK_SYS_FllStableDelay &rArr; CLOCK_SYS_GetCoreClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_clock_mk64f12.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>CLOCK_SYS_SetSimConfigration</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_clock_mk64f12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_SYS_SetSimConfigration &rArr; CLOCK_HAL_SetOutDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetOutDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>

<P><STRONG><a name="[247]"></a>CLOCK_SYS_SetMcgPeeToFbe</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SYS_SetMcgPeeToFbe
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetClkOutSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[248]"></a>CLOCK_HAL_SetClkOutSrc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgPeeToFbe
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[249]"></a>CLOCK_HAL_GetClkOutStat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgPeeToFbe
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[24a]"></a>CLOCK_HAL_SetLowPowerModeCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[24c]"></a>OSC_HAL_SetExternalRefClkCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscDeinit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetOscerConfigration
</UL>

<P><STRONG><a name="[24d]"></a>OSC_HAL_SetExternalRefClkInStopModeCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscDeinit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetOscerConfigration
</UL>

<P><STRONG><a name="[251]"></a>RTC_HAL_SetOscillatorCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_RtcOscInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_RtcOscDeinit
</UL>

<P><STRONG><a name="[8]"></a>debug_putc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_debug_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text)
</UL>
<P><STRONG><a name="[25e]"></a>fput_pad</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, print_scan.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doprint
</UL>

<P><STRONG><a name="[25d]"></a>mknumstr</STRONG> (Thumb, 166 bytes, Stack size 36 bytes, print_scan.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doprint
</UL>

<P><STRONG><a name="[25f]"></a>scan_ignore_white_space</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, print_scan.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_prv
</UL>

<P><STRONG><a name="[2e8]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[32a]"></a>rt_ms2tick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[2eb]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[334]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[333]"></a>rt_timer_remove</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_timer_remove))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[2a3]"></a>eth_check_link</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, net_eth.o(i.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_check_link
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[2a5]"></a>eth_fetch_frame</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, net_eth.o(i.eth_fetch_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_fetch_frame &rArr; mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_thread
</UL>

<P><STRONG><a name="[f]"></a>eth_notify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_eth.o(i.eth_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_notify &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_eth.o(i.eth_init_link)
</UL>
<P><STRONG><a name="[2dd]"></a>ip_get_chksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip.o(i.ip_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip_get_chksum &rArr; chksum16
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[2df]"></a>ip_get_route</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, net_ip.o(i.ip_get_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_tx_offload
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
</UL>

<P><STRONG><a name="[2d9]"></a>icmp_send_message</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, net_icmp.o(i.icmp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icmp_send_message &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_tx_offload
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_service_run
</UL>

<P><STRONG><a name="[343]"></a>udp_port_in_use</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_udp.o(i.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
</UL>

<P><STRONG><a name="[33a]"></a>tcp_map_socket</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_map_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[33c]"></a>tcp_parse_opt</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[337]"></a>tcp_proc_acknr</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_proc_acknr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_proc_acknr &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[338]"></a>tcp_proc_dupack</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_proc_dupack))
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[33f]"></a>tcp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_que_free &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
</UL>

<P><STRONG><a name="[339]"></a>tcp_que_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
</UL>

<P><STRONG><a name="[340]"></a>tcp_que_resend</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
</UL>

<P><STRONG><a name="[336]"></a>tcp_send_ctrl</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[341]"></a>tcp_send_data</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[33d]"></a>tcp_send_reset</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[33e]"></a>tcp_set_cwnd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_set_cwnd))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[335]"></a>tcp_transit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[342]"></a>tcp_write</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_tx_offload
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[11]"></a>nbns_listener</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, net_nbns_client.o(i.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nbns_listener &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_nbns_client.o(i.nbns_client_init)
</UL>
<P><STRONG><a name="[e]"></a>dhcp_listener</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, net_dhcp_client.o(i.dhcp_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dhcp_listener &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_notify
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_dhcp_client.o(i.dhcp_client_init)
</UL>
<P><STRONG><a name="[29c]"></a>dhcp_send_message</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, net_dhcp_client.o(i.dhcp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
</UL>

<P><STRONG><a name="[29f]"></a>proc_opt_renew</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, net_dhcp_client.o(i.proc_opt_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = proc_opt_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[29e]"></a>proc_opt_req</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, net_dhcp_client.o(i.proc_opt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = proc_opt_req &rArr; dhcp_client_notify &rArr; ip4_ntoa &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[29d]"></a>proc_opt_sel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_dhcp_client.o(i.proc_opt_sel))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[283]"></a>add_server_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_http_server.o(i.add_server_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_server_id &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[293]"></a>chk_post_req</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, net_http_server.o(i.chk_post_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = chk_post_req &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2b8]"></a>cmp_fname_ext</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_http_server.o(i.cmp_fname_ext))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_ftype
</UL>

<P><STRONG><a name="[294]"></a>cmp_header</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_http_server.o(i.cmp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmp_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[298]"></a>get_next_field</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_http_server.o(i.get_next_field))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[297]"></a>get_next_par</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, net_http_server.o(i.get_next_par))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[2b6]"></a>hex2byte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_http_server.o(i.hex2byte))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_env_var
</UL>

<P><STRONG><a name="[2b1]"></a>http_add_header</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, net_http_server.o(i.http_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = http_add_header &rArr; utc_to_http &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_encoding
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgx_content_type
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2b5]"></a>http_error_msg</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, net_http_server.o(i.http_error_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_error_msg &rArr; add_server_id &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2b7]"></a>http_get_ftype</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, net_http_server.o(i.http_get_ftype))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = http_get_ftype
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_content_type
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_fname_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2ba]"></a>http_kill_session</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, net_http_server.o(i.http_kill_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = http_kill_session &rArr; cgi_process_data &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fclose
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[10]"></a>http_listener</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, net_http_server.o(i.http_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = http_listener &rArr; http_proc_header &rArr; http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_query
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept_client
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_req_line
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_ftype
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_http_server.o(i.http_server_init)
</UL>
<P><STRONG><a name="[2bf]"></a>http_open_file</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, net_http_server.o(i.http_open_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_open_file &rArr; imageFileInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageFileInfo
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_file_access
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_ftime
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2be]"></a>http_proc_header</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, net_http_server.o(i.http_proc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = http_proc_header &rArr; http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_check_account
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pos
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b64_to_asc
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2c2]"></a>http_proc_multipart</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, net_http_server.o(i.http_proc_multipart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = http_proc_multipart &rArr; cgi_process_data &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2c0]"></a>http_proc_post</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, net_http_server.o(i.http_proc_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = http_proc_post &rArr; cgi_process_data &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[296]"></a>http_strcpy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_http_server.o(i.http_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = http_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2ca]"></a>http_to_utc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, net_http_server.o(i.http_to_utc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[2bd]"></a>proc_req_line</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net_http_server.o(i.proc_req_line))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[2c1]"></a>read_script_line</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, net_http_server.o(i.read_script_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_script_line
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[2cb]"></a>search_delim</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, net_http_server.o(i.search_delim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = search_delim
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
</UL>

<P><STRONG><a name="[2b4]"></a>utc_to_http</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, net_http_server.o(i.utc_to_http))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = utc_to_http &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[65]"></a>net_timer_tick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_sys.o(i.net_timer_tick))
<BR>[Address Reference Count : 1]<UL><LI> net_sys.o(.constdata)
</UL>
<P><STRONG><a name="[30d]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[318]"></a>rt_ret_regs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_regs))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>

<P><STRONG><a name="[287]"></a>arp_cache_alloc</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, net_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[285]"></a>arp_is_cacheable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, net_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[290]"></a>arp_proc_response</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, net_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_proc_response
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[28f]"></a>arp_send_reply</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, net_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arp_send_reply &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[289]"></a>arp_send_request</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
</UL>

<P><STRONG><a name="[2ef]"></a>mem_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_mem.o(i.mem_lock))
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_resize
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>

<P><STRONG><a name="[2f0]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_resize
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>

<P><STRONG><a name="[2f1]"></a>get_crc32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_common.o(i.get_crc32))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_crc32
</UL>

<P><STRONG><a name="[27f]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[282]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[281]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
